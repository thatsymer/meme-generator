{"ast":null,"code":"var _jsxFileName = \"E:\\\\Desktop\\\\Web Developer\\\\todo-app\\\\src\\\\MemeGenerator.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MemeGenerator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\n      allMemeImgs: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.generateBtn = this.generateBtn.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\").then(response => response.json()).then(response => {\n      const {\n        memes\n      } = response.data;\n      this.setState({\n        allMemeImgs: memes\n      });\n    });\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  generateBtn(event) {\n    event.preventDefault();\n    const randomNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\n    const randomMeme = this.state.allMemeImgs[randomNum].url;\n    this.setState({\n      randomImg: randomMeme\n    });\n  }\n  /**\r\n  * Create a method that, when the \"Gen\" button is clicked, chooses one of the\r\n  * memes from our `allMemeImgs` array at random and makes it so that is the\r\n  * meme image that shows up in the bottom portion of our meme generator site (`.url`)\r\n  */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"meme-form\",\n        onSubmit: this.generateBtn,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"topText\",\n          value: this.state.topText,\n          placeholder: \"Top Text\",\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"bottomText\",\n          value: this.state.bottomText,\n          placeholder: \"Bottom Text\",\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"GENERATE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meme\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: this.state.randomImg,\n          alt: \"#\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"top\",\n          children: this.state.topText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"bottom\",\n          children: this.state.bottomText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MemeGenerator;","map":{"version":3,"sources":["E:/Desktop/Web Developer/todo-app/src/MemeGenerator.js"],"names":["React","Component","MemeGenerator","constructor","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","generateBtn","componentDidMount","fetch","then","response","json","memes","data","setState","event","name","value","target","preventDefault","randomNum","Math","floor","random","length","randomMeme","url","render"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\r\nimport './App.css'\r\n\r\nclass MemeGenerator extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            topText: \"\",\r\n            bottomText: \"\",\r\n            randomImg: \"http://i.imgflip.com/1bij.jpg\",\r\n            allMemeImgs: []\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.generateBtn = this.generateBtn.bind(this)\r\n    }\r\n    \r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const {memes} = response.data\r\n                this.setState({ allMemeImgs: memes })\r\n            })\r\n    }\r\n    \r\n\r\n    handleChange(event) {\r\n    const {name, value} = event.target\r\n        this.setState({[name]: value})\r\n    }\r\n\r\n    generateBtn(event){\r\n        event.preventDefault()\r\n        const randomNum = Math.floor(Math.random()* this.state.allMemeImgs.length)\r\n        const randomMeme = this.state.allMemeImgs[randomNum].url\r\n        this.setState({ randomImg: randomMeme})\r\n    }\r\n        /**\r\n     * Create a method that, when the \"Gen\" button is clicked, chooses one of the\r\n     * memes from our `allMemeImgs` array at random and makes it so that is the\r\n     * meme image that shows up in the bottom portion of our meme generator site (`.url`)\r\n     */\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"meme-form\" onSubmit={this.generateBtn}>\r\n                    <input type=\"text\" name=\"topText\" value={this.state.topText} placeholder=\"Top Text\" onChange={this.handleChange} />\r\n                    <input type=\"text\" name=\"bottomText\" value={this.state.bottomText} placeholder=\"Bottom Text\" onChange={this.handleChange} />\r\n                    <button>GENERATE</button>\r\n                </form> \r\n\r\n                <div className=\"meme\">\r\n                    <img src={this.state.randomImg} alt=\"#\"/>\r\n                    <h2 className=\"top\">{this.state.topText}</h2>\r\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeGenerator"]},"metadata":{},"sourceType":"module"}